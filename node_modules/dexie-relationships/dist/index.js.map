{"version":3,"file":null,"sources":["../src/schema-parser.js","../src/utils.js","../src/index.js"],"sourcesContent":["class SchemaParser {\n\n  /**\n   * Schema parser\n   *\n   * @param schema\n   */\n  constructor (schema) {\n    this.schema = schema\n  }\n\n  /**\n   * Extracts foreign keys from the schema\n   *\n   * @returns Object\n   */\n  getForeignKeys () {\n    let foreignKeys = {}\n\n    Object.keys(this.schema).forEach(table => {\n      let indexes = this.schema[table].split(',')\n\n      foreignKeys[table] = indexes\n        .filter(idx => idx.indexOf('->') !== -1)\n        .map(idx => {\n          // split the column and foreign table info\n          let [column, target] = idx.split('->').map(x => x.trim())\n\n          return {\n            index: column,\n            targetTable: target.split('.')[0],\n            targetIndex: target.split('.')[1]\n          }\n        })\n    })\n\n    return foreignKeys\n  }\n\n  /**\n   * Get schema without the foreign key definitions\n   *\n   * @returns Object\n   */\n  getCleanedSchema () {\n    let schema = {}\n\n    Object.keys(this.schema).forEach(table => {\n      let indexes = this.schema[table].split(',')\n\n      // Remove foreign keys syntax before calling the original method\n      schema[table] = indexes.map(idx => idx.split('->')[0].trim()).join(',')\n    })\n\n    return schema\n  }\n}\n\nexport default SchemaParser\n","\nexport function isIndexableType (value) {\n  return value != null && (// Using \"!=\" instead of \"!==\" to check for both null and undefined!\n      typeof value === 'string' ||\n      typeof value === 'number' ||\n      value instanceof Date ||\n      (Array.isArray(value) && value.every(isIndexableType))\n    )\n}\n","import Dexie from 'dexie'\nimport SchemaParser from './schema-parser'\nimport {isIndexableType} from './utils'\n\nconst Relationships = (db) => {\n  // Use Dexie.Promise to ensure transaction safety.\n  const Promise = Dexie.Promise\n\n  /**\n   * Iterate through all items and collect related records\n   *\n   * @param relationships\n   *\n   * @returns {Dexie.Promise}\n   */\n  db.Table.prototype.with = function (relationships) {\n    return this.toCollection().with(relationships)\n  }\n\n  /**\n   * Iterate through all items and collect related records\n   *\n   * @param relationships\n   *\n   * @returns {Dexie.Promise}\n   */\n  db.Collection.prototype.with = function (relationships) {\n    const baseTable = this._ctx.table.name\n    const databaseTables = db._allTables\n\n    // this holds tables that have foreign keys pointing at the current table\n    let usableForeignTables = []\n\n    // validate target tables and add them into our usable tables object\n    Object.keys(relationships).forEach((column) => {\n      let tableOrIndex = relationships[column]\n      let matchingIndex = this._ctx.table.schema.idxByName[tableOrIndex]\n\n      if (matchingIndex && matchingIndex.hasOwnProperty('foreignKey')) {\n        let index = matchingIndex\n        usableForeignTables.push({\n          column: column,\n          index: index.foreignKey.targetIndex,\n          tableName: index.foreignKey.targetTable,\n          targetIndex: index.foreignKey.index,\n          oneToOne: true\n        })\n      } else {\n        let table = tableOrIndex\n\n        if (!databaseTables.hasOwnProperty(table)) {\n          throw new Error('Relationship table ' + table + ' doesn\\'t exist.')\n        }\n\n        if (!databaseTables[table].schema.hasOwnProperty('foreignKeys')) {\n          throw new Error('Relationship table ' + table + ' doesn\\'t have foreign keys set.')\n        }\n\n        // remove the foreign keys that don't link to the base table\n        let columns = databaseTables[table].schema.foreignKeys.filter(column => column.targetTable === baseTable)\n\n        if (columns.length > 0) {\n          usableForeignTables.push({\n            column: column,\n            index: columns[0].index,\n            tableName: table,\n            targetIndex: columns[0].targetIndex\n          })\n        }\n      }\n    })\n\n    return this.toArray().then(rows => {\n      //\n      // Extract the mix of all related keys in all rows\n      //\n      let queries = usableForeignTables\n        .map(foreignTable => {\n          // For each foreign table, query all items that any row refers to\n          let tableName = foreignTable.tableName\n          let allRelatedKeys = rows\n            .map(row => row[foreignTable.targetIndex])\n            .filter(isIndexableType)\n\n          // Build the Collection to retrieve all related items\n          return databaseTables[tableName]\n              .where(foreignTable.index)\n              .anyOf(allRelatedKeys)\n        })\n\n      // Execute queries in parallell\n      let queryPromises = queries.map(query => query.toArray())\n\n      //\n      // Await all results and then try mapping each response\n      // with its corresponding row and attach related items onto each row\n      //\n      return Promise.all(queryPromises).then(queryResults => {\n        usableForeignTables.forEach((foreignTable, idx) => {\n          let tableName = foreignTable.tableName\n          let result = queryResults[idx]\n          let targetIndex = foreignTable.targetIndex\n          let foreignIndex = foreignTable.index\n          let column = foreignTable.column\n\n          // Create a lookup by targetIndex (normally 'id')\n          // and set the column onto the target\n          let lookup = {}\n          result.forEach(record => {\n            let foreignKey = record[foreignIndex]\n            if (foreignTable.oneToOne) {\n              lookup[foreignKey] = record\n            } else {\n              (lookup[foreignKey] = lookup[foreignKey] || [])\n                .push(record)\n            }\n          })\n\n          // Populate column on each row\n          rows.forEach(row => {\n            let foreignKey = row[targetIndex]\n            let record = lookup[foreignKey]\n            if (foreignKey !== null && foreignKey !== undefined && !record) {\n              throw new Error(\n                `Could not lookup foreign key where ` +\n                `${tableName}.${foreignIndex} == ${baseTable}.${column}. ` +\n                `The content of the failing key was: ${JSON.stringify(foreignKey)}.`)\n            }\n\n            // Set it as a non-enumerable property so that the object can be safely put back\n            // to indexeddb without storing relations redundantly (IndexedDB will only store \"own non-\n            // enumerable properties\")\n            Object.defineProperty(row, column, {\n              value: record,\n              enumerable: false,\n              configurable: true,\n              writable: true\n            })\n          })\n        })\n      }).then(() => rows)\n    })\n  }\n\n  db.Version.prototype._parseStoresSpec = Dexie.override(\n    db.Version.prototype._parseStoresSpec,\n    parseStoresSpec => function (storesSpec, outDbSchema) {\n      const parser = new SchemaParser(storesSpec)\n\n      let foreignKeys = parser.getForeignKeys()\n      // call the original method\n      let rv = parseStoresSpec.call(this, parser.getCleanedSchema(), outDbSchema)\n\n      // set foreign keys into database table objects\n      // to use later in 'with' method\n      Object.keys(outDbSchema).forEach(table => {\n        if (foreignKeys.hasOwnProperty(table)) {\n          outDbSchema[table].foreignKeys = foreignKeys[table]\n          foreignKeys[table].forEach(fk => {\n            outDbSchema[table].idxByName[fk.index].foreignKey = fk\n          })\n        }\n      })\n\n      return rv\n    })\n}\n\n// https://github.com/dfahlander/Dexie.js/issues/625:\nRelationships.default = Relationships\n\nexport default Relationships\n"],"names":["this","const","let"],"mappings":"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"}